"""
TrackFlow Reports API
Provides report generation and export functionality
"""

import frappe
from frappe import _
import json
from datetime import datetime


@frappe.whitelist()
def generate_attribution_pdf(deal_name):
    """Generate PDF attribution report for a deal"""
    try:
        # Get deal data
        deal = frappe.get_doc("CRM Deal", deal_name)
        
        # Get attribution report data
        from trackflow.integrations.crm_deal import get_deal_attribution_report
        attribution_data = get_deal_attribution_report(deal_name)
        
        if "error" in attribution_data:
            return {"error": attribution_data["error"]}
        
        # Generate PDF using Frappe's PDF generation
        html_content = f"""
        <div style="font-family: Arial, sans-serif; padding: 20px;">
            <h1>Attribution Report</h1>
            <h2>Deal: {deal.name}</h2>
            
            <div style="margin: 20px 0;">
                <h3>Deal Summary</h3>
                <p><strong>Deal Value:</strong> ${attribution_data.get('deal_value', 0):,.2f}</p>
                <p><strong>Attribution Model:</strong> {attribution_data.get('attribution_model', 'Last Touch')}</p>
                <p><strong>Total Touchpoints:</strong> {attribution_data.get('touchpoint_count', 0)}</p>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>Attribution Breakdown</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr style="background-color: #f5f5f5;">
                        <th style="border: 1px solid #ddd; padding: 8px;">Channel</th>
                        <th style="border: 1px solid #ddd; padding: 8px;">Credit</th>
                        <th style="border: 1px solid #ddd; padding: 8px;">Value</th>
                    </tr>
        """
        
        # Add attribution breakdown rows
        if "attribution_breakdown" in attribution_data:
            for channel, data in attribution_data["attribution_breakdown"].items():
                credit = data.get("credit", 0)
                value = data.get("value", 0)
                html_content += f"""
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 8px;">{channel}</td>
                        <td style="border: 1px solid #ddd; padding: 8px;">{credit:.1%}</td>
                        <td style="border: 1px solid #ddd; padding: 8px;">${value:,.2f}</td>
                    </tr>
                """
        
        html_content += """
                </table>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>Recent Touchpoints</h3>
                <ul>
        """
        
        # Add touchpoints
        for touchpoint in attribution_data.get("touchpoints", []):
            timestamp = touchpoint.get("timestamp", "")
            channel = touchpoint.get("campaign", touchpoint.get("source", "Unknown"))
            html_content += f"<li>{timestamp} - {channel}</li>"
        
        html_content += """
                </ul>
            </div>
            
            <div style="margin-top: 40px; font-size: 12px; color: #666;">
                <p>Generated by TrackFlow on """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + """</p>
            </div>
        </div>
        """
        
        # Generate PDF
        from frappe.utils.pdf import get_pdf
        pdf_data = get_pdf(html_content)
        
        # Create file
        file_name = f"attribution_report_{deal.name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        # Save as file
        file_doc = frappe.get_doc({
            "doctype": "File",
            "file_name": file_name,
            "content": pdf_data,
            "is_private": 0,
            "folder": "Home/Reports"
        })
        file_doc.insert()
        
        return {
            "status": "success", 
            "file_url": file_doc.file_url,
            "message": f"Attribution report generated successfully"
        }
        
    except Exception as e:
        frappe.log_error(frappe.get_traceback(), "Generate Attribution PDF Error")
        return {"error": str(e)}


@frappe.whitelist()
def get_campaign_performance_data(campaign_name=None, date_range=None):
    """Get campaign performance data for reports"""
    try:
        filters = {}
        if campaign_name:
            filters["name"] = campaign_name
            
        campaigns = frappe.get_all(
            "Link Campaign",
            filters=filters,
            fields=["name", "campaign_name", "total_clicks", "conversions", "conversion_rate", "budget_amount"]
        )
        
        performance_data = []
        for campaign in campaigns:
            # Get detailed metrics
            clicks = frappe.db.count("Click Event", {"campaign": campaign.name})
            conversions = frappe.db.count("Link Conversion", {"campaign": campaign.name})
            
            performance_data.append({
                "campaign": campaign.campaign_name,
                "clicks": clicks,
                "conversions": conversions,
                "conversion_rate": (conversions / clicks * 100) if clicks > 0 else 0,
                "budget": campaign.budget_amount or 0,
                "cost_per_click": (campaign.budget_amount / clicks) if clicks > 0 and campaign.budget_amount else 0
            })
            
        return {"data": performance_data}
        
    except Exception as e:
        frappe.log_error(frappe.get_traceback(), "Get Campaign Performance Error")
        return {"error": str(e)}